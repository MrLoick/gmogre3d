#summary Class defining particle system based special effects.

=== Overview ===
Particle systems are special effects generators which are based on a number of moving points to create the impression of things like like sparkles, smoke, blood spurts, dust etc. 

These functions simply manage a single collection of particles in world space with a shared local origin for emission. 

And like all visible objects, the particle system will only be considered for rendering once it has been attached to a !SceneNode. 
<BR>
<BR>
=== !CreateParticleSystem(string name) ===
----
Creates a particle system based on a template name.

This function creates a new particle system instance based on the named template (usually defined in scripts) and returns the ID to the caller. It can be destroyed using the !DestroyParticleSystem function. 

Each system created from a template takes the template's settings at the time of creation, but is completely separate from the template from there on. 

Creating a particle system does not make it a part of the scene. As with other visible objects, a particle system is not rendered until it is attached to a SceneNode. 

This is probably the more useful particle system creation method since it does not require manual setup of the system. Note that the initial quota is based on the template but may be changed later.
====Parameters====
   * _name_ - The name of the template to base the new instance on.
<BR>
<BR>
=== !CreateEmptyParticleSystem(real quota, string group) ===
----
Create an empty particle system.

This function creates a new, blank particle system instance and returns the ID. It can be destroyed using the !DestroyParticleSystem function. 

The instance created from this function won't actually do anything because on creation a particle system has no emitters. The caller should manipulate the instance through it's ParticleSystem function to actually create a real particle effect. 

Creating a particle system does not make it a part of the scene. As with other visible objects, a particle system is not rendered until it is attached to a SceneNode.
====Parameters====
   * _quota_ - The maximum number of particles to allow in this system.
   * _group_ - The resource group which will be used to load dependent resources 
<BR>
<BR>
=== !DestroyParticleSystem(real particle_system_id) ===
----
Destroys a particle system and removes it from the !SceneManager. 
====Parameters====
   * _particle_system_id_ - The ID of the particle system.
<BR>
<BR>
=== !SetParticleSystemMaterial(real particle_system_id, string part_sys_name) ===
----
=== !SetParticleSystemQuota(real particle_system_id, real quota) ===
----
=== !EnableParticleSystemIndividualCulling(real particle_system_id, real enable) ===
----
=== !EnableParticleSystemSorting(real particle_system_id, real enable) ===
----
=== !EnableParticleSystemParticlesInLocalSpace(real particle_system_id, real enable) ===
----
=== !SetParticleSystemNonVisibleTimeout(real particle_system_id, real timeout) ===
----
=== !FastForwardParticleSystem(real particle_system_id, real time, real interval) ===
----
=== !SetParticleSystemSpeedFactor(real particle_system_id, real speed) ===
----
=== !SetParticleSystemIterationInterval(real particle_system_id, real interval) ===
----
=== !SetParticleSystemDimensions(real particle_system_id, real width, real height) ===
----
=== !GetParticleSystemDefaultWidth(real particle_system_id) ===
----
=== !GetParticleSystemDefaultHeight(real particle_system_id) ===
----
=== !AttachParticleSystemToSceneNode(real particle_system_id, real scene_node_id) ===
----
=== !DetachParticleSystemFromSceneNode(real particle_system_id, real scene_node_id) ===
----
=== !SetParticleSystemRenderQueueGroup(real particle_system_id, real type) ===
----
Sets the render queue group this object will be rendered through.

Render queues are grouped to allow you to more tightly control the ordering of rendered objects. If you do not call this method, all objects default to the default queue, which is fine for most objects. You may want to alter this if you want this entity to always appear in front of other objects, e.g. for a 3D menu system or such. 
====Parameters====
   * _part_sys_id_ - The ID of the particle system.
   * _type_ - The render queue ID.  Can be:
      * _global.RENDER_QUEUE_BACKGROUND_ - Use this queue for objects which must be rendered first e.g. backgrounds.
      * _global.RENDER_QUEUE_SKIES_EARLY_ - First queue (after backgrounds), used for skyboxes if rendered first.
      * _global.RENDER_QUEUE_1_
      * _global.RENDER_QUEUE_2_
      * _global.RENDER_QUEUE_WORLD_GEOMETRY_1_
      * _global.RENDER_QUEUE_3_ 
      * _global.RENDER_QUEUE_4_
      * _global.RENDER_QUEUE_MAIN_ - The default render queue.
      * _global.RENDER_QUEUE_6_
      * _global.RENDER_QUEUE_7_
      * _global.RENDER_QUEUE_WORLD_GEOMETRY_2_
      * _global.RENDER_QUEUE_8_
      * _global.RENDER_QUEUE_9_
      * _global.RENDER_QUEUE_SKIES_LATE_ - Penultimate queue(before overlays), used for skyboxes if rendered last.
      * _global.RENDER_QUEUE_OVERLAY_ - Use this queue for objects which must be rendered last e.g. overlays.
      * _global.RENDER_QUEUE_MAX_ - Final possible render queue, don't exceed this.
<BR>
<BR>
=== !SetParticleSystemQueryFlags(real particle_system_id, real flags) ===
----
=== !AddParticleSystemEmitter(real particle_system_id, string name) ===
----
=== !GetNumParticleSystemEmitters(real particle_system_id) ===
----
=== !GetParticleSystemEmitter(real particle_system_id, real index) ===
----
=== !RemoveParticleSystemEmitter(real particle_system_id, real index) ===
----
=== !RemoveAllParticleSystemEmitters(real particle_system_id) ===
----