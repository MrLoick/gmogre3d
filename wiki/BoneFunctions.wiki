#summary A bone in a skeleton.

=== Overview ===
See Skeleton for more information about the principles behind skeletal animation. This class is a bone in the joint hierarchy. Mesh vertices also have assignments to bones to define how they move in relation to the skeleton. 
<BR>
<BR>
=== !GetBoneHandle(real bone_id) ===
----
Returns the handle to an existing bone.

Bones can be retrieved using the !GetSkeletonBone function.
====Parameters====
   * _bone_id_ - The ID of a bone.
<BR>
<BR>
=== !SetBoneBindingPose(real bone_id) ===
----
Sets the current position / orientation to be the 'binding pose' ie the layout in which bones were originally bound to a mesh.
====Parameters====
   * _bone_id_ - The ID of a bone.
<BR>
<BR>
=== !ResetBone(real bone_id) ===
----
Resets the position and orientation of this Bone to the original binding position.

Bones are bound to the mesh in a binding pose. They are then modified from this position during animation. This method returns the bone to it's original position and orientation. 
====Parameters====
   * _bone_id_ - The ID of a bone.
<BR>
<BR>
=== !EnableBoneManualControl(real bone_id, real enable) ===
----
Enables or disables whether a bone is manually controlled.

Manually controlled bones can be altered by the game at runtime, and their positions will not be reset by the animation routines. Note that you should also make sure that there are no !AnimationTrack objects referencing this bone.
====Parameters====
   * _bone_id_ - The ID of a bone.
   * _enable_ - Whether to enable or disable manual control.
<BR>
<BR>
=== !SetBoneScale(real bone_id, real x, real y, real z) ===
----
Sets the scaling factor applied to this bone.

Scaling factors, unlike other transforms, are not always inherited by child bones. Whether or not scalings affect the size of the child bone depends on the SetBoneInheritScale option of the child. In some cases you want a scaling factor of a parent bone to apply to a child bone (e.g. where the child bone is a part of the same object, so you want it to be the same relative size based on the parent's size), but not in other cases (e.g. where the child bone is just for positioning another object, you want it to maintain it's own size). The default is to inherit as with other transforms. 

Note that like rotations, scalings are oriented around the bone's origin. 
====Parameters====
   * _bone_id_ - The ID of a bone.
   * _x_, _y_, _z_ - The scale factors.
<BR>
<BR>
=== !SetBonePosition(real bone_id, real x, real y, real z) ===
----
Sets the position of the bone relative to it's parent.  
====Parameters====
   * _bone_id_ - The ID of a bone.
   * _x_, _y_, _z_ - The position of the bone.
<BR>
<BR>
=== !GetBonePosition(real bone_id) ===
----
Gets the position of the bone relative to it's parent.
====Parameters====
   * _bone_id_ - The ID of a bone.
<BR>
<BR>
=== !BoneTranslate(real bone_id, real x, real y, real z, real relative_type) ===
----
Moves the node along the Cartesian axes.

This function moves the bone by the supplied vector along the world Cartesian axes, i.e. along world x,y,z.
====Parameters====
   * _bone_id_ - The ID of a bone.
   * _x_, _y_, _z_ - The delta amounts to move the bone.
   * _relative_type_ - The space in which the translation is relative to. Can be:
    * global.TS_LOCAL
    * global.TS_PARENT
    * global.TS_WORLD 
<BR>
<BR>
=== !SetBoneOrientation(real bone_id, real yaw, real pitch, real roll) ===
----
=== !GetBoneOrientation(real bone_id) ===
----
=== !SetBoneRoll(real bone_id, real degrees, real relative_type) ===
----
=== !GetBoneRoll(real bone_id) ===
----
=== !SetBoneYaw(real bone_id, real degrees, real relative_type) ===
----
=== !GetBoneYaw(real bone_id) ===
----
=== !SetBonePitch(real bone_id, real degrees, real relative_type) ===
----
=== !GetBonePitch(real bone_id) ===
----
=== !SetBoneInitialState(real bone_id) ===
----
=== !ResetBoneInitialState(real bone_id) ===
----