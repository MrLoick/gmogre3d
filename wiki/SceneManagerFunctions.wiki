#summary Enter description here


#summary Manages the organisation and rendering of a 'scene' i.e. a collection of objects and potentially world geometry. A SceneManager organises the culling and rendering of the scene.
<BR>
<BR>

=== !CreateSceneManager(real type) ===
----
Create a SceneManager instance based on scene type support.
====Parameters====
   * type - Contains one or more type of scenes.  Can be global.ST_GENERIC, global.ST_EXTERIOR_CLOSE, global.ST_EXTERIOR_FAR, global.ST_EXTERIOR_REAL_FAR, or global.ST_INTERIOR 
<BR>
<BR>

=== !SetSceneManagerWorldGeometry(string filename) ===
----
Sets the source of the 'world' geometry e.g. rooms, landscape, etc.
====Parameters====
   * anim_id - The ID of the animation
   * type - The interpolation mode to use.  Can be IM_LINEAR or IM_SPLINE
<BR>
<BR>

=== !SetShadowTechnique(real type) ===
----
Sets the general shadow technique to be used in this scene. There are multiple ways to generate shadows in a scene, and each has strengths and weaknesses.
<br>
Stencil-based approaches can be used to draw very long, extreme shadows without loss of precision and the 'additive' version can correctly show the shadowing of complex effects like bump mapping because they physically exclude the light from those areas. However, the edges are very sharp and stencils cannot handle transparency, and they involve a fair amount of CPU work in order to calculate the shadow volumes, especially when animated objects are involved.

Texture-based approaches are good for handling transparency (they can, for example, correctly shadow a mesh which uses alpha to represent holes), and they require little CPU overhead, and can happily shadow geometry which is deformed by a vertex program, unlike stencil shadows. However, they have a fixed precision which can introduce 'jaggies' at long range and have fillrate issues of their own.
<br>
We support 2 kinds of stencil shadows, and 2 kinds of texture-based shadows, and one simple decal approach. The 2 stencil approaches differ in the amount of multipass work that is required - the modulative approach simply 'darkens' areas in shadow after the main render, which is the least expensive, whilst the additive approach has to perform a render per light and adds the cumulative effect, whcih is more expensive but more accurate. The texture based shadows both work in roughly the same way, the only difference is that the shadowmap approach is slightly more accurate, but requires a more recent graphics card. Note that because mixing many shadow techniques can cause problems, only one technique is supported at once. Also, you should call this method at the start of the scene setup. 
====Parameters====
   * type - The type of shadow technique to use.
<P><SPAN class=funcparamtype>global.SHADOWTYPE_NONE
<P><SPAN class=funcparamtype>global.SHADOWTYPE_STENCIL_MODULATIVE
<P><SPAN class=funcparamtype>global.SHADOWTYPE_STENCIL_ADDITIVE
<P><SPAN class=funcparamtype>global.SHADOWTYPE_TEXTURE_MODULATIVE
<P><SPAN class=funcparamtype>global.SHADOWTYPE_TEXTURE_ADDITIVE
<P><SPAN class=funcparamtype>global.SHADOWTYPE_TEXTURE_ADDITIVE_INTEGRATED
<P><SPAN class=funcparamtype>global.SHADOWTYPE_TEXTURE_MODULATIVE_INTEGRATED
<BR>
<BR>

=== !SetShadowFarDistance(real distance); ===

=== !SetShadowColor(real color); ===

=== !SetFog(real type, real color, real density, real start, real end); ===

=== !EnableSkyBox(real enable, string material_name); ===

=== !EnableSkyDome(real enable, string material_name, real curvature, real tiling); ===

=== !EnableSkyPlane(real enable, string material_name, real scale, real tiling); ===



